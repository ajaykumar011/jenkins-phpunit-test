Composer Installation to Install such thins. 




------------------------------------------------------------------------------------------------
Required Jenkins Plugins
You need to install the following plugins for Jenkins:
------------------------------------------------------------------------------------------------
Checkstyle (for processing PHP_CodeSniffer logfiles in Checkstyle format)
Clover PHP (for processing PHPUnit's Clover XML logfile)
Crap4J (for processing PHPUnit's Crap4J XML logfile)
DRY (for processing phpcpd logfiles in PMD-CPD format)
HTML Publisher (for publishing documentation generated by phpDox, for instance)
JDepend (for processing PHP_Depend logfiles in JDepend format)
Plot (for processing phploc CSV output)
PMD (for processing PHPMD logfiles in PMD format)
Violations (for processing various logfiles)
Warnings (for processing PHP compiler warnings in the console log)
xUnit (for processing PHPUnit's JUnit XML logfile)

Plugins installer from Jenkins CLI (this is not tested -- go to web and install from there)
sudo su jenkins
cd ~
wget http://jenkins.cloudzone.today:8080/jnlpJars/jenkins-cli.jar
java -jar jenkins-cli.jar -s http://jenkins.cloudzone.today/ install-plugin checkstyle cloverphp crap4j dry htmlpublisher jdepend plot pmd violations warnings xunit phing blueballs
java -jar jenkins-cli.jar -s http://jenkins.cloudzone.today/ enable-plugin checkstyle cloverphp crap4j dry htmlpublisher jdepend plot pmd violations warnings xunit phing blueballs

java -jar jenkins-cli.jar -s http://jenkins.cloudzone.today/ safe-restart
java -jar jenkins-cli.jar -s http://jenkins.cloudzone.today/ restart  #quick and forcefully
java -jar jenkins-cli.jar -s http://jenkins.cloudzone.today/ list-plugins # to check use grep


or
(recommeded)

wget http://localhost:8080/jnlpJars/jenkins-cli.jar
java -jar jenkins-cli.jar -s http://localhost:8080 install-plugin checkstyle cloverphp crap4j dry htmlpublisher jdepend plot pmd violations xunit phing
java -jar jenkins-cli.jar -s http://localhost:8080 safe-restart

Above commands gave us all the plugins for reporting and integration of PHP tools. The missing piece is actually a php-template ‚Äì archetype Jenkins job that we‚Äôll clone to get us going with creating CI build jobs:

curl -L https://raw.githubusercontent.com/sebastianbergmann/php-jenkins-template/master/config.xml | \
java -jar jenkins-cli.jar -s http://localhost:8080 create-job php-template
java -jar jenkins-cli.jar -s http://localhost:8080 reload-configuration


curl -sS https://getcomposer.org/installer | php



Let‚Äôs create composer.json file with the tools we‚Äôve listed earlier:

{
    "require-dev": {
        "phpunit/phpunit": "^4.8",
        "phpmd/phpmd": "^2.2",
        "squizlabs/php_codesniffer": "^2.3",
        "sebastian/phpcpd": "^2.0",
        "phploc/phploc": "^2.1",
        "pdepend/pdepend": "^2.1",
        "theseer/phpdox": "^0.8.1.1",
        "symfony/browser-kit": "^2.7",
        "symfony/css-selector": "^2.7",
        "phing/phing": "^2.12";
    }
}

Installing the tools is as simple as invoking install command:
php composer.phar install


The above one will install tools in vendor dir along with other libraries. In addition, executable will be placed in ./vendor/bin/ directory, 
so you can call the following tools ./vendor/bin/phploc ./src/ for example. We‚Äôll make it more convenient with task runner in the next step.
Besides installing vendor components, Composer will create composer.lock file in the project root. 
The file has got information on exact versions of used libraries (uses hashes to verify that!). 
It‚Äôs intended to ensure that all environments are consistent and have the same dependencies. 
You should commit all the Composer files to repository (composer.json, composer.lock, composer.phar) to be able to replicate installation of each host.





Static code analysis is not very popular in PHP world, because PHP is a dynamically and stringly typed language. Even though, it is worth considering for the sake of keeping up with coding standards (one PSR-2 to rule them all) and avoiding stupid mistakes (i.e. syntax errors due to PHP version mismatch). If you have a grammar-nazi in the team, you‚Äôll appreciate letting tools do the tedious job.

In order to make the effort worthwhile it‚Äôs good to have the toolbox integrated into CI pipeline. Benefit for the team is a constant check for compliance, letting people focus on important things during code reviews (e.g. variable and method naming, architectural decisions). For business or management benefit is also clear ‚Äì nice graphs showing our code is clean and tidy. Remember, management loves graphs!

jenkins1_futureprocessing

Also for the development team, just a quick glance at a chart similar to the above one can give you an idea if things go in the right direction or not. As you can see until build #230 things were going pretty well (look at checkstyle for example), but then it got awry. No need to argue. Let‚Äôs just dive in to configure all of the necessary tooling and then take a look what we can get out of it (with pictures!).

This tutorial will show you how to easily integrate various Quality Assurance tools for PHP with popular Jenkins Continuous Integration server. We will learn about the following tools:

PHP Code_Sniffer ‚Äì checks code style, has got popular conventions build-in (e.g. PSR-2, Symfony2)
PHP Mess Detector ‚Äì looks for potential problems, such as possible bugs, dead code, suboptimal code, overcomplicated expressions, etc
PHP Depend ‚Äì can generate set of software metrics for code structure (see further)
PHP Copy/Paste Detector ‚Äì scans project for duplicated code
PHPLOC ‚Äì measures the size of PHP project
PHPUnit ‚Äì runs unit tests and is used as a runner for other test tools
phpDox ‚Äì documentation generator (not limited to API)
Phing ‚Äì task runner in PHP, used to invoke other tools
Prerequisite
Ubuntu LTS (12.04 or newer)
PHP + extensions (CLI, XSL) (PHP 5.3 is an absolute minimum)
Java 6+

Jenkins CI server installation
There‚Äôs plenty of installation guides for Jenkins, so let me be brief. Just add official repo, install packages, start the service and you‚Äôre good to go:

wget -q -O - http://pkg.jenkins-ci.org/debian-stable/jenkins-ci.org.key | sudo apt-key add -
echo "deb http://pkg.jenkins-ci.org/debian-stable binary/" | sudo tee /etc/apt/sources.list.d/jenkins-ci.list
sudo apt-get update
sudo apt-get install jenkins
sudo service jenkins start
After executing all of the above steps we‚Äôve got Jenkins CI server running on 8080 port, have a look at http://localhost:8080 to check. Regarding Jenkins web interface, let‚Äôs install indispensable Green Balls plugin by going to http://localhost:8080/pluginManager/available and filtering for ‚Äúgreen‚Äù. Because build should always be green, not blue üôÇ

Using Jenkins template for PHP
Now, it‚Äôs time to use tried-and-true http://jenkins-php.org/ template. Again, let‚Äôs drop to command line in order to make things easier:

wget http://localhost:8080/jnlpJars/jenkins-cli.jar
java -jar jenkins-cli.jar -s http://localhost:8080 install-plugin checkstyle cloverphp crap4j dry htmlpublisher jdepend plot pmd violations xunit phing
java -jar jenkins-cli.jar -s http://localhost:8080 safe-restart
Above commands gave us all the plugins for reporting and integration of PHP tools. The missing piece is actually a php-template ‚Äì archetype Jenkins job that we‚Äôll clone to get us going with creating CI build jobs:

curl -L https://raw.githubusercontent.com/sebastianbergmann/php-jenkins-template/master/config.xml | \
     java -jar jenkins-cli.jar -s http://localhost:8080 create-job php-template
java -jar jenkins-cli.jar -s http://localhost:8080 reload-configuration
At this point we‚Äôve got Jenkins installation with plugins that will consume data produced by static code analysers and tests runners. There‚Äôs also php-template project archetype that you will clone later for your own project.

PHP QA toolbox
Let‚Äôs get back to the project to integrate it with just installed Jenkins plugins. The good old http://jenkins-php.org/ template served me well for years. It is pretty well written and nicely documented, but it requires Java installed (to run Ant). We will use PHP based tools instead. If you‚Äôre starting from scratch, you can use project bootstrap on GitHub for that. We‚Äôll use parts of that project below as well to make things easier.

The only missing part is installation of all those PHP QA tools mentioned there. PEAR is not recommended by PHPUnit any more, but there‚Äôs a new sheriff in town called Composer. It is inspired by bundler and npm and took over PHP world by storm when I was not following. Composer installation is very simple, just paste the command into terminal:

curl -sS https://getcomposer.org/installer | php
One handy feature of Composer is require-dev section of composer.json file. It lets you specify which packages are used for application development, but don‚Äôt have to be available at runtime (think of production environment). It‚Äôs similar to test scope in Maven in a way it sets dependencies required only for testing.

Managing PHPUnit and other QA tools via Composer has got the advantage that we can have different set of tools(or versions of those) per project. Let‚Äôs create composer.json file with the tools we‚Äôve listed earlier:

{
    "require-dev": {
        "phpunit/phpunit": "^4.8",
        "phpmd/phpmd": "^2.2",
        "squizlabs/php_codesniffer": "^2.3",
        "sebastian/phpcpd": "^2.0",
        "phploc/phploc": "^2.1",
        "pdepend/pdepend": "^2.1",
        "theseer/phpdox": "^0.8.1.1",
        "symfony/browser-kit": "^2.7",
        "symfony/css-selector": "^2.7",
        "phing/phing": "^2.12";
    }
}
Installing the tools is as simple as invoking install command:

php composer.phar install
The above one will install tools in vendor dir along with other libraries. In addition, executable will be placed in ./vendor/bin/ directory, so you can call the following tools ./vendor/bin/phploc ./src/ for example. We‚Äôll make it more convenient with task runner in the next step.

Besides installing vendor components, Composer will create composer.lock file in the project root. The file has got information on exact versions of used libraries (uses hashes to verify that!). It‚Äôs intended to ensure that all environments are consistent and have the same dependencies. You should commit all the Composer files to repository (composer.json, composer.lock, composer.phar) to be able to replicate installation of each host.

Building with Phing
In order to execute the build process we need some task runner, and Phing is a convenient option for that. If you‚Äôre familiar with Apache Ant, you‚Äôll feel at home, since Phing was inspired by Ant. First, we need Phing targets definitions and directory for build artifacts to be processed by Jenkins later.

cd your-project-dir
wget https://raw.githubusercontent.com/adambro/php-jenkins-example/master/build.xml
echo "cache.properties" >> .gitignore
We‚Äôve added Phing as a dependency in the previous step, but you can also install it system-wide for convenience, or just link the binary in the root of the project:

ln -s ./vendor/bin/phing phing
Phing not only performs full-blown analysis with all the tools, but it can also run the individual tool of your choice. It has a neat advantage of ironing-out the nitty-gritty differences in CLI parameters each tool takes. In short, it is as simple as:

./phing phpcpd
The targets essentially define an executable and all command line parameters to perform particular task. Look for in build.xml file.

To make setup complete we need config files for PHPUnit, phpmd and phpdox as well:

mkdir build
wget https://raw.githubusercontent.com/adambro/php-jenkins-example/master/phpunit.xml.dist
wget https://raw.githubusercontent.com/adambro/php-jenkins-example/master/build/phpmd.xml -O build/phpmd.xml
wget https://raw.githubusercontent.com/adambro/php-jenkins-example/master/build/phpdox.xml -O build/phpdox.xml















------------------------------------------------------------------------------------------------
Required PHP Tools
The following PHP tools are required on server
------------------------------------------------------------------------------------------------
PHPUnit
PHP_CodeSniffer
PHPLOC
PHP_Depend
PHPMD
PHPCPD
phpDox